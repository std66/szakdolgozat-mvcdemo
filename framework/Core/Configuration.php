<?php/** * Az alkalmazás-konfiguráció kezeléséért felelős osztály *  * @author Sinku Tamás <sinkutamas@gmail.com> * @license http://opensource.org/licenses/gpl-license.php GNU Public License * @since 0.1 */class Configuration {	/**	 * A konfigurációt tároló tömb	 * @var array	 * @since 0.1	 */	private $Config = null;	/**	 * A konfiguráció validálása során felfedezett hibákat tárolja	 * @var array	 * @since 0.1	 */	private $Errors = array();	/**	 * Létrehozza a Configuration osztály egy példányát.	 * 	 * @param array $Configuration	 * @param boolean $Validate Ha true, validálja a konfigurációt, ha false, nem	 * 	 * @throws ConfigurationException Érvénytelen konfiguráció esetén váltódik ki, ha $Validate értéke true	 * @throws ArgumentNullException Ha $Configuration vagy $Validate értéke NULL	 * 	 * @since 0.1	 */	public function __construct($Configuration, $Validate) {		if (!isset($Configuration)) {			throw new ArgumentNullException("Configuration");		}		if (!isset($Validate)) {			throw new ArgumentNullException("Validate");		}		$this->Config = $Configuration;		if ($Validate && !$this->validateConfiguration()) {			throw new ConfigurationException(				"A konfigurációs fájl helytelenül van beállítva.", $this->Errors			);		}	}	/**	 * Megadja a konfiguráció validálása során felmerült hibákat.	 * 	 * @return array A hibaüzeneteket tároló tömb	 * @since 0.1	 */	public function getErrors() {		return $this->Errors;	}	/**	 * Visszaadja a kért konfigurációs bejegyzés értékét ha létezik.	 * 	 * @param string $name A kért konfigurációs bejegyzés neve	 * @throws EntryNotFoundException Nem létező bejegyzés kérése esetén váltódik ki	 * @since 0.1	 */	public function __get($name) {		if (!isset($this->Config[$name])) {			throw new EntryNotFoundException($name);		}		return $this->Config[$name];	}	/**	 * Megadja, hogy egy adott beállítás szerepel-e a konfigurációs jegyzékben.	 * 	 * @param string $name A beállítás neve	 * @return boolean True, ha létezik a beállítás, false ha nem	 * @since 0.1	 */	public function __isset($name) {		return isset($this->Config[$name]) === true;	}		/**	 * Validálja a teljes konfigurációt.	 * 	 * @return boolean True ha a konfiguráció helyes, false ha nem	 * @since 0.1	 */	private function validateConfiguration() {		$this->Errors = array();				if (!$this->validateBasicConfig()) {			return false;		}				if ($this->UseDB && !$this->validateDatabaseConfig()) {			return false;		}				return true;	}	/**	 * Validálja az alapvető konfigurációt. Ha a konfiguráció nem érvényes,	 * a getErrors() megadja a felfedezett hibákat.	 * 	 * @return boolean True, ha érvényes, false ha nem	 * @since 0.1	 */	private function validateBasicConfig() {		$Valid = true;		$checklist = array(			"SoftwareName" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false,			)),			"UseDB" => new TypeValidator(array(				"type" => "boolean",				"allowNull" => false			)),			"Author" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false,			)),			"Version" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false,			)),			"DefaultTemplate" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false,			)),			"UseMobileTemplate" => new TypeValidator(array(				"type" => "boolean",				"allowNull" => false			)),			"AllowScriptClients" => new TypeValidator(array(				"type" => "boolean",				"allowNull" => false			)),			"DefaultRoute" => new RouteValidator(array(				"allowNull" => false,				"allowEmpty" => false			))		);		foreach ($checklist as $Parameter => $Validator) {			if (!isset($this->Config[$Parameter])) {				$this->Errors[] = "A(z) $Parameter nincs beállítva.";				$Valid = false;				continue;			}			if (!$Validator->isValid($this->Config[$Parameter])) {				$this->Errors[] = "A(z) $Parameter értéke érvénytelen.";				$Valid = false;			}		}		return $Valid;	}	/**	 * Validálja az adatbázis-konfigurációt. Ha a konfiguráció nem érvényes,	 * a getErrors() megadja a felfedezett hibákat.	 * 	 * @return boolean True, ha érvényes, false ha nem	 * @since 0.1	 */	private function validateDatabaseConfig() {		$Valid = true;				if (!isset($this->Config["MySQL"])) {			$this->Errors[] = "Az alkalmazás adatbázist igényel, de a kapcsolódási adatok nincsenek megadva";			return false;		}		$DbRequires = array(			"Host" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false			)),			"Username" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false			)),			"Password" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => true			)),			"Schema" => new StringValidator(array(				"allowNull" => false,				"allowEmpty" => false			))		);		foreach ($DbRequires as $Parameter => $Validator) {			if (!isset($this->Config["MySQL"][$Parameter])) {				$this->Errors[] = "A(z) MySQL/$Parameter nincs beállítva.";				$Valid = false;				continue;			}			if (!$Validator->isValid($this->Config["MySQL"][$Parameter])) {				$this->Errors[] = "A(z) MySQL/$Parameter értéke érvénytelen.";				$Valid = false;			}		}				return $Valid;	}}